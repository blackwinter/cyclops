var search_data = {"index":{"searchIndex":["cyclops","optionparserextension","version","__on_opts()","abort()","agree()","ask()","askpass()","config_opts()","defaults()","execute()","exit()","generic_opts()","highline()","init()","keys()","load_config()","merge_config()","new()","open_file_or_std()","option()","option_parser()","opts()","parent_const_get()","parse_options()","post_opts()","pre_opts()","progname()","puts()","quit()","reset()","run()","separator()","shut()","switch()","to_a()","to_s()","usage()","verbose_opts()","version()","warn()","copying","changelog","readme"],"longSearchIndex":["cyclops","cyclops::optionparserextension","cyclops::version","cyclops::optionparserextension#__on_opts()","cyclops#abort()","cyclops#agree()","cyclops#ask()","cyclops#askpass()","cyclops#config_opts()","cyclops#defaults()","cyclops#execute()","cyclops#exit()","cyclops#generic_opts()","cyclops#highline()","cyclops#init()","cyclops::optionparserextension#keys()","cyclops#load_config()","cyclops#merge_config()","cyclops::new()","cyclops#open_file_or_std()","cyclops::optionparserextension#option()","cyclops#option_parser()","cyclops#opts()","cyclops#parent_const_get()","cyclops#parse_options()","cyclops#post_opts()","cyclops#pre_opts()","cyclops#progname()","cyclops#puts()","cyclops#quit()","cyclops#reset()","cyclops#run()","cyclops::optionparserextension#separator()","cyclops#shut()","cyclops::optionparserextension#switch()","cyclops::version#to_a()","cyclops::version#to_s()","cyclops#usage()","cyclops#verbose_opts()","cyclops#version()","cyclops#warn()","","",""],"info":[["Cyclops","","Cyclops.html","",""],["Cyclops::OptionParserExtension","","Cyclops/OptionParserExtension.html","",""],["Cyclops::Version","","Cyclops/Version.html","",""],["__on_opts","Cyclops::OptionParserExtension","Cyclops/OptionParserExtension.html#method-i-__on_opts","(name, args, sym)",""],["abort","Cyclops","Cyclops.html#method-i-abort","(msg = nil, status = 1)",""],["agree","Cyclops","Cyclops.html#method-i-agree","(question, character = nil, &block)",""],["ask","Cyclops","Cyclops.html#method-i-ask","(question, echo = true)",""],["askpass","Cyclops","Cyclops.html#method-i-askpass","(question, &block)",""],["config_opts","Cyclops","Cyclops.html#method-i-config_opts","(opts, desc = 'Path to config file (YAML)')",""],["defaults","Cyclops","Cyclops.html#method-i-defaults","()",""],["execute","Cyclops","Cyclops.html#method-i-execute","(*args)",""],["exit","Cyclops","Cyclops.html#method-i-exit","(status = 0)",""],["generic_opts","Cyclops","Cyclops.html#method-i-generic_opts","(opts)",""],["highline","Cyclops","Cyclops.html#method-i-highline","()",""],["init","Cyclops","Cyclops.html#method-i-init","(*args)",""],["keys","Cyclops::OptionParserExtension","Cyclops/OptionParserExtension.html#method-i-keys","()",""],["load_config","Cyclops","Cyclops.html#method-i-load_config","(file = options[:config] || default = defaults[:config])",""],["merge_config","Cyclops","Cyclops.html#method-i-merge_config","(args = [config, defaults])",""],["new","Cyclops","Cyclops.html#method-c-new","(defaults = nil, *args)",""],["open_file_or_std","Cyclops","Cyclops.html#method-i-open_file_or_std","(file, write = false)",""],["option","Cyclops::OptionParserExtension","Cyclops/OptionParserExtension.html#method-i-option","(name, *args, &block)","<p>Delegates to #on with some convenience shortcuts.\n<p>If <code>name</code> is a Symbol, installs both long and short options. …\n"],["option_parser","Cyclops","Cyclops.html#method-i-option_parser","()",""],["opts","Cyclops","Cyclops.html#method-i-opts","(opts)",""],["parent_const_get","Cyclops","Cyclops.html#method-i-parent_const_get","(const, range = 0...-1)",""],["parse_options","Cyclops","Cyclops.html#method-i-parse_options","(arguments)",""],["post_opts","Cyclops","Cyclops.html#method-i-post_opts","(opts)",""],["pre_opts","Cyclops","Cyclops.html#method-i-pre_opts","(opts)",""],["progname","Cyclops","Cyclops.html#method-i-progname","()",""],["puts","Cyclops","Cyclops.html#method-i-puts","(*msg)",""],["quit","Cyclops","Cyclops.html#method-i-quit","(msg = nil, include_usage = msg != false)",""],["reset","Cyclops","Cyclops.html#method-i-reset","(stdin = STDIN, stdout = STDOUT, stderr = STDERR)",""],["run","Cyclops","Cyclops.html#method-i-run","(arguments)",""],["separator","Cyclops::OptionParserExtension","Cyclops/OptionParserExtension.html#method-i-separator","(string = '')",""],["shut","Cyclops","Cyclops.html#method-i-shut","(msg = nil, status = 0)",""],["switch","Cyclops::OptionParserExtension","Cyclops/OptionParserExtension.html#method-i-switch","(name, *args)","<p>Delegates to #on with some convenience shortcuts.\n<p>If <code>name</code> is a Symbol, installs both long and short options. …\n"],["to_a","Cyclops::Version","Cyclops/Version.html#method-i-to_a","()","<p>Returns array representation.\n"],["to_s","Cyclops::Version","Cyclops/Version.html#method-i-to_s","()","<p>Short-cut for version string.\n"],["usage","Cyclops","Cyclops.html#method-i-usage","(prog)",""],["verbose_opts","Cyclops","Cyclops.html#method-i-verbose_opts","(opts)",""],["version","Cyclops","Cyclops.html#method-i-version","()",""],["warn","Cyclops","Cyclops.html#method-i-warn","(*msg)",""],["COPYING","","COPYING.html","","<p>License for cyclops\n\n<pre>                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version ...</pre>\n"],["ChangeLog","","ChangeLog.html","","<p>Revision history for cyclops\n<p>0.0.4 [2014-09-01]\n<p>Added support for <code>--[no-]&lt;switch&gt;</code>.\n"],["README","","README.html","","<p>cyclops - A command-line option parser\n<p>VERSION\n<p>This documentation refers to cyclops version 0.0.4\n"]]}}